{"version":3,"sources":["components/file-upload.tsx","types/ascii-grid-loader.ts","types/height-map.ts","types/terrain-generator.ts","components/playground.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FileUploader","hiddenFileInput","React","createRef","handleClick","event","current","click","handleFileChange","files","target","props","onFilesChanged","Button","onClick","this","type","ref","onChange","style","display","accept","Component","AsciiGridLoader","file","a","name","substring","lastIndexOf","toLowerCase","readFile","rows","properties","parseEsriGridProperties","rasterValues","parseEsriGridRasterValues","noDataValue","rasterValuesRange","getRasterValueRange","Ok","minValue","min","maxValue","max","Err","Error","nCols","getEsriGridProperty","nRows","xllCorner","yllCorner","cellSize","getOptionalEsriGridProperty","Array","rowIndex","length","rowData","split","rowValues","colIndex","value","parseFloat","isNaN","push","key","undefined","i","nameValuePair","y","yRasterValues","x","Promise","resolve","reject","content","reader","FileReader","onload","e","result","onerror","readAsText","HeightMap","data","canvas","document","createElement","width","height","context","getContext","canvasData","getImageData","rowRasterValues","b","calculateBrightness","drawPixel","putImageData","toDataURL","r","g","index","TerrainGenerator","detail","map","steepness","size","Math","pow","maxHeight","set","divide","z","val","half","scale","square","random","diamond","values","valid","filter","reduce","sum","offset","avg","average","get","Playground","engine","scene","ground","camera","heightMapImage","terrainScaleInterval","terrainScalePercentage","verticesData","loadFile","asciiGridLoader","parse","esriGridDataResult","clearScaleTerrainInterval","processesriGridDataResult","handleClose","setState","showFileModalOpen","triggerOpen","errorMsg","triggerPlay","previousState","isPlaying","triggerWireframe","isWireframeEnabled","material","wireframe","state","triggerScreenshot","BABYLON","CreateScreenshot","anchor","href","download","getFormattedTime","addEventListener","clickHandler","setTimeout","URL","revokeObjectURL","removeEventListener","triggerDownload","today","Date","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","getSeconds","beginScaleTerrain","window","setInterval","clearInterval","updateMeshPositions","positions","init","terrainGenerator","generate","isOk","esriGridData","heightMapResult","load","error","message","getElementById","preserveDrawingBuffer","stencil","createScene","resize","runRenderLoop","activeCamera","alpha","render","spot","diffuse","specular","cameraYAxis","lowerBetaLimit","upperBetaLimit","PI","lowerRadiusLimit","upperRadiusLimit","attachControl","groundMaterial","CreateGroundFromHeightMap","getVerticesData","PositionKind","rotAnim","ANIMATIONTYPE_VECTOR3","ANIMATIONLOOPMODE_CYCLE","rotKeys","frame","rotation","setKeys","animations","registerBeforeRender","bakeCurrentTransformIntoVertices","id","className","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Modal","show","onHide","Header","closeButton","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.447b4441.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\ninterface Props {\r\n  onFilesChanged: ((files: FileList) => void);\r\n}\r\n\r\nexport class FileUploader extends Component<Props> {\r\n    private hiddenFileInput = React.createRef<HTMLInputElement>();\r\n\r\n    private handleClick = (event: React.SyntheticEvent) => {\r\n        this.hiddenFileInput.current?.click();\r\n    };\r\n\r\n    private handleFileChange = (event: React.SyntheticEvent) => {\r\n        const { files } = event.target as HTMLInputElement;\r\n        if (files) this.props.onFilesChanged(files);\r\n    };\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n              <Button onClick={this.handleClick}>\r\n                  Select file\r\n              </Button>\r\n              <input type=\"file\"\r\n                      ref={this.hiddenFileInput}\r\n                      onChange={this.handleFileChange}\r\n                      style={{display:'none'}}\r\n                      accept=\".asc\" \r\n              /> \r\n            </>\r\n        );\r\n    }\r\n}","import { Err, Ok, Result } from \"neverthrow\";\r\nimport { EsriGridData } from \"../interfaces/EsriGridData\";\r\nimport { EsriGridProperties } from \"../interfaces/EsriGridProperties\";\r\nimport { Range } from \"../interfaces/Range\";\r\n\r\nexport class AsciiGridLoader {\r\n    file: File;\r\n\r\n    constructor(file: File) {\r\n        this.file = file;\r\n    }\r\n\r\n    async parse(): Promise<Result<EsriGridData, Error>>\r\n    {\r\n        let ext: string = this.file.name.substring(this.file.name.lastIndexOf('.') + 1).toLowerCase();\r\n        if (ext === \"asc\")\r\n        {\r\n            let rows: Array<string> = await this.readFile(this.file);\r\n\r\n            try\r\n            {\r\n                let properties: EsriGridProperties = this.parseEsriGridProperties(rows);\r\n                let rasterValues: Array<Array<number>> = this.parseEsriGridRasterValues(rows, properties.noDataValue);\r\n                let rasterValuesRange: Range = this.getRasterValueRange(rasterValues);\r\n\r\n                return new Ok({\r\n                    properties: properties,\r\n                    rasterValues: rasterValues,\r\n                    minValue: rasterValuesRange.min,\r\n                    maxValue: rasterValuesRange.max\r\n                });\r\n            }\r\n            catch (ex)\r\n            {\r\n                return new Err(new Error(\"Esri ascii grid file is not valid\"));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return new Err(new Error(\"File must have extension .asc\"));\r\n        }\r\n    }\r\n\r\n    parseEsriGridProperties(rows:Array<string>): EsriGridProperties {\r\n        let props: EsriGridProperties =\r\n        {\r\n            nCols: this.getEsriGridProperty<number>(rows, \"ncols\"),\r\n            nRows: this.getEsriGridProperty<number>(rows, \"nrows\"),\r\n            xllCorner: this.getEsriGridProperty<number>(rows, \"xllcorner\"),\r\n            yllCorner: this.getEsriGridProperty<number>(rows, \"yllcorner\"),\r\n            cellSize: this.getEsriGridProperty<number>(rows, \"cellsize\"),\r\n            noDataValue: this.getOptionalEsriGridProperty<number>(rows, \"noDataValue\")\r\n        };\r\n\r\n        return props;\r\n    }\r\n\r\n    parseEsriGridRasterValues(rows: Array<string>, noDataValue?: number): Array<Array<number>> {\r\n        let rasterValues = new Array<Array<number>>();\r\n        for (let rowIndex = 6; rowIndex < rows.length; rowIndex++) {\r\n            let rowText: string = rows[rowIndex];\r\n            if (rowText) {\r\n                let rowData: Array<string> = rows[rowIndex].split(\" \");\r\n                let rowValues: Array<number> = new Array<number>();\r\n\r\n                for (let colIndex = 0; colIndex < rowData.length; colIndex++) {\r\n                    let value = 0;\r\n                    if (value === noDataValue) {\r\n                        value = 0;\r\n                    }\r\n                    else {\r\n                        value = parseFloat(rowData[colIndex]);\r\n                        if (isNaN(value))\r\n                        {\r\n                            throw Error(`Invalid value \"${ rowData[colIndex] }\" found line ${ rowIndex }`);\r\n                        }\r\n                    }\r\n\r\n                    rowValues.push(value);\r\n                }\r\n                rasterValues.push(rowValues);\r\n            }\r\n        }\r\n\r\n        return rasterValues;\r\n    }\r\n\r\n    getEsriGridProperty<T>(rows:Array<string>, key:string): T {\r\n        let value: T|undefined = this.getOptionalEsriGridProperty(rows, key);\r\n        if (value === undefined)\r\n            throw new Error(`Property ${ key } does not exist`);\r\n\r\n        return value as T;\r\n    }\r\n\r\n    getOptionalEsriGridProperty<T>(rows:Array<string>, key:string): T|undefined {\r\n        // Esri Grid Properties are found in the first 6 rows\r\n        for (let i:number = 0; i < 6; i++) {\r\n            let nameValuePair:Array<string> = rows[i].split(' ');\r\n            if (nameValuePair[0] === key) {\r\n                return nameValuePair[1] as any;\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getRasterValueRange(rows: Array<Array<number>>, noDataValue?: number): Range {\r\n        let min: number|null = null;\r\n        let max: number = 0;\r\n\r\n        for (let y: number = 0; y < rows.length; y++) {\r\n            let yRasterValues: Array<number> = rows[y];\r\n            for (let x: number = 0; x < yRasterValues.length; x++) {\r\n                let value: number = yRasterValues[x];\r\n                if (min === null || value < min) {\r\n                    min = value;\r\n                }\r\n                if (value > max) {\r\n                    max = value;\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max\r\n        } as Range;\r\n    }\r\n\r\n    readFile(file: File): Promise<Array<string>> {\r\n        return new Promise((resolve, reject) => {\r\n            let content: string = \"\";\r\n            const reader = new FileReader();\r\n\r\n            // Wait till complete\r\n            reader.onload = function(e: any) {\r\n                content = e.target.result;\r\n                if (!content) {\r\n                    return new Array<String>();\r\n                }\r\n                else {\r\n                    resolve(content.split(/\\r\\n|\\n/));\r\n                }\r\n            };\r\n\r\n            // Make sure to handle error states\r\n            reader.onerror = function(e: any) {\r\n                reject(e);\r\n            };\r\n          \r\n            reader.readAsText(file);\r\n        });\r\n    }\r\n}","import { Err, Ok, Result } from \"neverthrow\";\r\nimport { EsriGridData } from \"../interfaces/EsriGridData\";\r\n\r\nexport class HeightMap {\r\n    generate(data: EsriGridData): Result<string, Error>\r\n    {\r\n        let canvas: HTMLCanvasElement = document.createElement(\"CANVAS\") as HTMLCanvasElement;\r\n        canvas.width = data.properties.nCols;\r\n        canvas.height = data.properties.nRows;\r\n        let context: CanvasRenderingContext2D|null = canvas.getContext(\"2d\");\r\n\r\n        if (context) {\r\n            let canvasData: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n            for (let y: number = 0; y < canvas.height; y++)\r\n            {\r\n                let rowRasterValues: Array<number> = data.rasterValues[y];\r\n                for (let x: number = 0; x < canvas.width; x++)\r\n                {\r\n                    let b: number = this.calculateBrightness(rowRasterValues[x], data);\r\n                    this.drawPixel(canvasData, canvas.width, x, y, b, b, b, 255);\r\n                }\r\n            }\r\n\r\n            context.putImageData(canvasData, 0, 0);\r\n            \r\n            return new Ok(canvas.toDataURL(\"image/png\"));\r\n        }\r\n\r\n        return new Err(new Error(\"Canvas has no context\"));\r\n    }\r\n\r\n    calculateBrightness(value: number, data: EsriGridData): number {\r\n        if (value === data.properties.noDataValue || data.maxValue === 0) {\r\n            value = 0;\r\n        }\r\n\r\n        // Convert elevation to value based on 256 greyscale \r\n        return (value / data.maxValue) * 255;\r\n    }\r\n\r\n    drawPixel(canvasData: ImageData, width: number, x: number, y: number, r: number, g: number, b: number, a: number) {\r\n        let index: number = (x + y * width) * 4;\r\n\r\n        canvasData.data[index + 0] = r;\r\n        canvasData.data[index + 1] = g;\r\n        canvasData.data[index + 2] = b;\r\n        canvasData.data[index + 3] = a;\r\n     }\r\n}","/*\r\n    Based on https://www.playfuljs.com/realistic-terrain-in-130-lines/\r\n*/\r\n\r\nimport { Ok, Result } from \"neverthrow\";\r\nimport { EsriGridData } from \"../interfaces/EsriGridData\";\r\n\r\nexport class TerrainGenerator {\r\n    private map: Array<Array<number>>;\r\n    private steepness!: number;\r\n    private size: number;\r\n    private max!: number;\r\n\r\n    constructor(detail: number) {\r\n        this.size = Math.pow(2, detail) + 1;\r\n        this.max = this.size - 1;\r\n        this.map = new Array<Array<number>>(this.max);\r\n    }\r\n\r\n    generate(cellSize: number, nCols: number, nRows: number, maxHeight: number, steepness: number): Result<EsriGridData, Error>\r\n    {\r\n        this.steepness = steepness;\r\n\r\n        this.set(0, 0, this.max);\r\n        this.set(this.max, 0, this.max / 2);\r\n        this.set(this.max, this.max, 0);\r\n        this.set(0, this.max, this.max / 2);\r\n\r\n        this.divide(this.max);\r\n\r\n        let data: EsriGridData = {\r\n            minValue: 0,\r\n            maxValue: maxHeight,\r\n            properties: {\r\n                cellSize: 1,\r\n                nCols: nCols,\r\n                nRows: nRows,\r\n                xllCorner: 0,\r\n                yllCorner: 0\r\n            },\r\n            rasterValues: this.map\r\n        };\r\n\r\n        return new Ok(data);\r\n    }\r\n\r\n    private get(x: number, z: number) {\r\n        if (x < 0 || x > this.max || z < 0 || z > this.max) return -1;\r\n        return this.map[x][z];\r\n    };\r\n\r\n    private set(x: number, z: number, val: number) {\r\n        if (!this.map[x]) {\r\n            this.map[x] = new Array<number>(this.max);\r\n        }\r\n        this.map[x][z] = val;\r\n    };\r\n\r\n    private divide(size: number) {\r\n        var x, z, half = size / 2;\r\n        var scale = this.steepness * size;\r\n        if (half < 1) return;\r\n\r\n        for (z = half; z < this.max; z += size) {\r\n            for (x = half; x < this.max; x += size) {\r\n                this.square(x, z, half, Math.random() * scale * 2 - scale);\r\n            }\r\n        }\r\n        for (z = 0; z <= this.max; z += half) {\r\n            for (x = (z + half) % size; x <= this.max; x += size) {\r\n                this.diamond(x, z, half, Math.random() * scale * 2 - scale);\r\n            }\r\n        }\r\n        this.divide(size / 2);\r\n    }\r\n\r\n    private average(values: Array<number>) {\r\n        var valid = values.filter(function(val) { return val !== -1; });\r\n        var total = valid.reduce(function(sum, val) { return sum + val; }, 0);\r\n        return total / valid.length;\r\n    }\r\n\r\n    private square(x: number, z: number, size: number, offset: number) {\r\n        let avg = this.average([\r\n            this.get(x - size, z - size),   // upper left\r\n            this.get(x + size, z - size),   // upper right\r\n            this.get(x + size, z + size),   // lower right\r\n            this.get(x - size, z + size)    // lower left\r\n        ]);\r\n        this.set(x, z, avg + offset);\r\n    }\r\n\r\n    private diamond(x: number, z: number, size: number, offset: number) {\r\n        let avg = this.average([\r\n            this.get(x, z - size),      // top\r\n            this.get(x + size, z),      // right\r\n            this.get(x, z + size),      // bottom\r\n            this.get(x - size, z)       // left\r\n        ]);\r\n        this.set(x, z, avg + offset);\r\n    }\r\n}","import * as BABYLON from 'babylonjs';\r\nimport { FloatArray } from 'babylonjs';\r\nimport { Component } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { FileUploader } from './file-upload';\r\nimport { AsciiGridLoader } from '../types/ascii-grid-loader';\r\nimport { EsriGridData } from '../interfaces/EsriGridData';\r\nimport { HeightMap } from '../types/height-map';\r\nimport { Result } from 'neverthrow';\r\nimport { TerrainGenerator } from '../types/terrain-generator';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface PlaygroundState {\r\n    isPlaying: boolean;\r\n    isWireframeEnabled: boolean;\r\n    showFileModalOpen: boolean;\r\n    errorMsg: string;\r\n}\r\n\r\nexport class Playground extends Component<Props, PlaygroundState> {\r\n    private engine!: BABYLON.Engine;\r\n    private scene!: BABYLON.Scene;\r\n    private ground!: BABYLON.GroundMesh;\r\n    private camera!: BABYLON.ArcRotateCamera;\r\n    private heightMapImage!: string;\r\n    private terrainScaleInterval!: number;\r\n    private terrainScalePercentage: number = 0;\r\n    private verticesData!: BABYLON.Nullable<FloatArray>;\r\n\r\n    public constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isPlaying: true,\r\n            isWireframeEnabled: false,\r\n            showFileModalOpen: false,\r\n            errorMsg: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.init();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.clearScaleTerrainInterval();\r\n    }\r\n\r\n    public init() {\r\n        let detail = 9;\r\n        let terrainGenerator = new TerrainGenerator(detail);\r\n        let size = 2 ** detail + 1;\r\n        let esriGridDataResult = terrainGenerator.generate(1, size, size, size, 0.5);\r\n        this.processesriGridDataResult(esriGridDataResult);\r\n    }\r\n\r\n    private loadFile = async(files: FileList) => {\r\n        const file: File = (files)[0];\r\n        let asciiGridLoader = new AsciiGridLoader(file);\r\n        let esriGridDataResult = await asciiGridLoader.parse();\r\n        this.clearScaleTerrainInterval();\r\n        this.processesriGridDataResult(esriGridDataResult);\r\n    }\r\n\r\n    private processesriGridDataResult(esriGridDataResult: Result<EsriGridData, Error>) {\r\n        if (esriGridDataResult.isOk()) {\r\n            let esriGridData = esriGridDataResult.value;\r\n            let heightMap = new HeightMap();\r\n            let heightMapResult = heightMap.generate(esriGridData);\r\n            if (heightMapResult.isOk()) {\r\n                let heightMapImage = heightMapResult.value;\r\n                if (heightMapImage != null) {\r\n                    this.load(esriGridData, heightMapImage);\r\n                    this.setState(() => ({\r\n                        showFileModalOpen: false\r\n                    }));\r\n                }\r\n            }\r\n            else {\r\n                let error = heightMapResult.error.message;\r\n                this.setState(() => ({\r\n                    errorMsg: error\r\n                }));\r\n            }\r\n        }\r\n        else\r\n        {\r\n            let error = esriGridDataResult.error.message;\r\n            this.setState(() => ({\r\n                errorMsg: error\r\n            }));\r\n        }\r\n    }\r\n\r\n    private onFilesChanged = (files: FileList) => {\r\n        this.loadFile(files);\r\n    }\r\n      \r\n    public load(data: EsriGridData, heightMapImage: string) {\r\n        this.heightMapImage = heightMapImage;\r\n        let canvas = document.getElementById(\"renderCanvas\") as HTMLCanvasElement;\r\n        this.engine = new BABYLON.Engine(canvas, true, { preserveDrawingBuffer: true, stencil: true });\r\n        this.createScene(canvas, data, heightMapImage);\r\n        window.addEventListener(\"resize\", () => {\r\n            // Handle browser resize events\r\n            this.engine.resize();\r\n        });\r\n        this.engine.runRenderLoop(() => {\r\n            let camera = this.scene.activeCamera as BABYLON.ArcRotateCamera;\r\n            if (this.state.isPlaying) {\r\n                camera.alpha += .001;\r\n            }\r\n            this.scene.render();\r\n        });\r\n    }\r\n\r\n    private createScene(canvas: HTMLCanvasElement, data: EsriGridData, heightMapImage: string) {\r\n        let size = data.properties.nCols > data.properties.nRows ? data.properties.nCols: data.properties.nRows;\r\n\r\n        this.scene = new BABYLON.Scene(this.engine);\r\n\r\n        // Light\r\n        let spot = new BABYLON.PointLight(\"spot\", new BABYLON.Vector3(size / 2, size, size / 2), this.scene);\r\n        spot.diffuse = new BABYLON.Color3(1, 1, 1);\r\n        spot.specular = new BABYLON.Color3(0, 0, 0);\r\n\r\n        // Camera\r\n        let cameraYAxis = ((data.maxValue - data.minValue) * 1.0) / 2.0;\r\n        this.camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0.8, size, new BABYLON.Vector3(0, cameraYAxis, 0), this.scene);\r\n        this.camera.lowerBetaLimit = 0.1;\r\n        this.camera.upperBetaLimit = (Math.PI / 2) * 0.9;\r\n        this.camera.lowerRadiusLimit = 30;\r\n        this.camera.upperRadiusLimit = size * 2;\r\n        this.camera.attachControl(canvas, true);\r\n        \r\n        // Ground\r\n        let groundMaterial = new BABYLON.StandardMaterial(\"ground\", this.scene);\r\n        this.ground = BABYLON.Mesh.CreateGroundFromHeightMap(\"ground\", heightMapImage, size, size, 200, 0, data.maxValue, this.scene, true, () => {\r\n            this.verticesData = this.ground.getVerticesData(BABYLON.VertexBuffer.PositionKind, false, true);\r\n        });\r\n        this.ground.material = groundMaterial;\r\n        this.ground.material.wireframe = this.state.isWireframeEnabled;\r\n\r\n        this.beginScaleTerrain();\r\n\r\n        let rotAnim = new BABYLON.Animation(\"ra\", \"rotation\", 15, BABYLON.Animation.ANIMATIONTYPE_VECTOR3, BABYLON.Animation.ANIMATIONLOOPMODE_CYCLE);\r\n\r\n        let rotKeys = [];\r\n        rotKeys.push({ frame: 0, value: this.camera.rotation });\r\n        rotKeys.push({ frame: 40, value: new BABYLON.Vector3(0, -Math.PI * 2, 0) });\r\n        rotKeys.push({ frame: 80, value: new BABYLON.Vector3(0, Math.PI * 2, 0) });\r\n        rotKeys.push({ frame: 120, value: new BABYLON.Vector3(0, 0, 0) });\r\n        rotAnim.setKeys(rotKeys);\r\n\r\n        this.camera.animations.push(rotAnim);\r\n\r\n        this.scene.registerBeforeRender(() => {\r\n            this.ground.updateMeshPositions(this.updateMeshPositions);\r\n            this.ground.bakeCurrentTransformIntoVertices();\r\n        });\r\n    };\r\n\r\n    private handleClose = () => {\r\n        this.setState(() => ({\r\n            showFileModalOpen: false\r\n        }));\r\n    }\r\n\r\n    private triggerOpen = () => {\r\n        this.setState(() => ({\r\n            showFileModalOpen: true,\r\n            errorMsg: \"\"\r\n        }));\r\n    }\r\n\r\n    private triggerPlay = () => {\r\n        this.setState((previousState) => ({\r\n            isPlaying: !previousState.isPlaying\r\n        }));\r\n    }\r\n  \r\n    private triggerWireframe = () => {\r\n        this.setState((previousState) => ({\r\n            isWireframeEnabled: !previousState.isWireframeEnabled\r\n        }), () => {\r\n            if (this.ground && this.ground.material) {\r\n                this.ground.material.wireframe = this.state.isWireframeEnabled;\r\n            }\r\n        });\r\n    }\r\n\r\n    private triggerScreenshot = () => {\r\n        BABYLON.Tools.CreateScreenshot(this.engine, this.camera, { width: 1024, height: 1024 }, (data) => {            \r\n            let anchor: HTMLAnchorElement = document.createElement(\"a\");\r\n            anchor.href = data;\r\n            anchor.download = `screenshot-${this.getFormattedTime()}.png`;\r\n\r\n            const clickHandler = () => {\r\n                setTimeout(() => {\r\n                    URL.revokeObjectURL(data);\r\n                    document.removeEventListener('click', clickHandler);\r\n                }, 150);\r\n            };\r\n\r\n            anchor.addEventListener('click', clickHandler, false);\r\n\r\n            anchor.click();\r\n        });\r\n    }\r\n\r\n    private triggerDownload = () => {\r\n        let anchor: HTMLAnchorElement = document.createElement(\"a\");\r\n        anchor.href = this.heightMapImage;\r\n        anchor.download = `heightmap-${this.getFormattedTime()}.png`;\r\n\r\n        const clickHandler = () => {\r\n            setTimeout(() => {\r\n                URL.revokeObjectURL(this.heightMapImage);\r\n                document.removeEventListener('click', clickHandler);\r\n            }, 150);\r\n        };\r\n\r\n        anchor.addEventListener('click', clickHandler, false);\r\n\r\n        anchor.click();\r\n    }\r\n\r\n    private getFormattedTime = (): string => {\r\n        let today = new Date();\r\n        let y = today.getFullYear();\r\n        let m = (today.getMonth() + 1).toString().padStart(2, '0');\r\n        let d = today.getDate().toString().padStart(2, '0');\r\n        let h = today.getHours().toString().padStart(2, '0');\r\n        let mi = today.getMinutes().toString().padStart(2, '0');\r\n        let s = today.getSeconds().toString().padStart(2, '0');\r\n        return y + \"-\" + m + \"-\" + d + \"-\" + h + \"-\" + mi + \"-\" + s;\r\n    }\r\n\r\n    private beginScaleTerrain = () => {\r\n        this.terrainScalePercentage = 0;\r\n        this.terrainScaleInterval = window.setInterval(() => {\r\n            if (this.terrainScalePercentage < 100) {\r\n                this.terrainScalePercentage += 0.5;\r\n            }\r\n            else {\r\n                this.clearScaleTerrainInterval();\r\n            }\r\n        }, 25);\r\n    }\r\n\r\n    private clearScaleTerrainInterval = () => {\r\n        if (this.terrainScaleInterval) {\r\n            window.clearInterval(this.terrainScaleInterval);\r\n            this.terrainScaleInterval = 0;\r\n        }\r\n    }\r\n\r\n    private updateMeshPositions = (positions: FloatArray) => {\r\n        if (this.terrainScalePercentage < 100 && this.verticesData) {\r\n            for (let i = 0; i < positions.length; i = i + 3) {\r\n                positions[i + 1] = this.verticesData[i + 1] * ((this.terrainScalePercentage * 1.0) / (100 * 1.0));\r\n            }\r\n        }\r\n    };\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <canvas id=\"renderCanvas\" width=\"800\" height=\"600\"></canvas>\r\n                <div className=\"controls\">\r\n                    <button onClick={this.triggerOpen}>\r\n                        <>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z\" />\r\n                        </svg>\r\n                        <span>\r\n                            Open\r\n                        </span>\r\n                        </>\r\n                    </button>\r\n                    <button onClick={this.triggerPlay}>\r\n                        {this.state.isPlaying\r\n                        ?<>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                        <span>\r\n                            Pause\r\n                        </span>\r\n                        </>\r\n                        :<>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z\" />\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n                        </svg>\r\n                        <span>\r\n                            Play\r\n                        </span>\r\n                        </>\r\n                        }\r\n                    </button>\r\n                    <button onClick={this.triggerWireframe} className={`${this.state.isWireframeEnabled ? 'active' : ''}`}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5\" />\r\n                        </svg>\r\n                        <span>\r\n                            Wireframe\r\n                        </span>\r\n                    </button>\r\n                    <button onClick={this.triggerScreenshot}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z\" />\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 13a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                        </svg>\r\n                        <span>\r\n                            Screenshot\r\n                        </span>\r\n                    </button>\r\n                    <button onClick={this.triggerDownload}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\r\n                        </svg>\r\n                        <span>\r\n                            Download\r\n                        </span>\r\n                    </button>\r\n                </div>\r\n                <Modal show={this.state.showFileModalOpen} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"pb-3\">\r\n                            Select an Esri Ascii Grid file to view. The file will be processed locally in your browser.\r\n                        </div>\r\n                        <div className={`d-flex justify-content-center align-items-center`}>\r\n                            <FileUploader onFilesChanged={ this.onFilesChanged } />\r\n                        </div>\r\n                        {this.state.errorMsg &&\r\n                        <div className={`d-flex justify-content-center align-items-center text-danger`}>\r\n                            { this.state.errorMsg }\r\n                        </div>\r\n                        }\r\n                        <div className=\"mt-3\">Need a sample file? Download one <a href=\"https://github.com/IDGuy/esri-ascii-viewer/blob/main/sample-resources/castle.asc?raw=true\" download>here</a></div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Playground } from './components/playground';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Playground></Playground>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}